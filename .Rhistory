plot_brinflows(VLP_example_compact,
label_brin_own = "x",
label_other_he = "andere HOI",
label_outside_he = "niet in HO",
alpha = 0.8)
# direct plotten in een html bleek een uitdaging
# vandaar de omweg mt opslaan en als afbeelding invoegen
ggsave(file = here::here("afbeeldingen", "brin_plot.png"),
plot = brin_plot,
width = 8,
height = 4)
brin_plot <- plot_brinflows(VLP_example_compact,
label_brin_own = "deze HOI",
label_other_he = "andere HOI",
label_outside_he = "niet in HO",
alpha = 0.8)
# direct plotten in een html bleek een uitdaging
# vandaar de omweg mt opslaan en als afbeelding invoegen
ggsave(file = here::here("afbeeldingen", "brin_plot.png"),
plot = brin_plot,
width = 8,
height = 4)
# direct plotten in een html bleek een uitdaging
# vandaar de omweg mt opslaan en als afbeelding invoegen
ggsave(file = here::here("afbeeldingen", "brin_plot.png"),
plot = brin_plot,
width = 10,
height = 4)
# direct plotten in een html bleek een uitdaging
# vandaar de omweg mt opslaan en als afbeelding invoegen
ggsave(file = here::here("afbeeldingen", "brin_plot.png"),
plot = brin_plot,
width = 9,
height = 4)
VLP_example_compact$switches |>
gt::gt()
switch |> gt::gt()
switch <- VLP_example_compact$switches
switch |> gt::gt()
switch <- VLP_example_compact$switches |>
mutate(type = ifelse(from_BRIN == brin_own,
"uitgaand",
"inkomend"))
switch <- VLP_example_compact$switches |>
dplyr::mutate(type = ifelse(from_BRIN == brin_own,
"uitgaand",
"inkomend"))
# variabelen voor zin 1
brin_own <- VLP_example$brin_own
switch <- VLP_example_compact$switches |>
dplyr::mutate(type = ifelse(from_BRIN == brin_own,
"uitgaand",
"inkomend"))
switch
switch <- VLP_example_compact$switches |>
dplyr::mutate(type = ifelse(from_BRIN == brin_own,
"uitgaand",
"inkomend"),
.before = 1)
switch
switch <- VLP_example_compact$switches |>
dplyr::mutate(wissel = ifelse(from_BRIN == brin_own,
"uitgaand",
"inkomend"),
.before = 1)
VLP_example_compact$enrolments_degrees_compact |>
dplyr::filter(type == "single" )
VLP_example_compact$enrolments_degrees_compact
VLP_example_compact$enrolments_degrees_compact |>
dplyr::filter(enrolmenttype == "single" )
VLP_example_compact$enrolments_degrees_compact |>
dplyr::filter(enrolment_type == "single" )
n_single <- VLP_example_compact$enrolments_degrees_compact |>
dplyr::filter(enrolment_type == "single" ) |> dplyr::n_distinct(student_id)
VLP_example_compact$enrolments_degrees_compact
VLP_example_compact$enrolments_degrees_compact |>
dplyr::filter(enrolment_type == "single" )
VLP_example_compact$enrolments_degrees_compact |>
dplyr::filter(enrolment_type == "single" ) |> dplyr::n_distinct(student_id)
?n_distinct
n_single <- VLP_example_compact$enrolments_degrees_compact |>
dplyr::filter(enrolment_type == "single" ) |> dplyr::pull(student_id) |> dplyr::n_distinct()
n_single <- VLP_example_compact$enrolments_degrees_compact |>
dplyr::filter(enrolment_type == "single",
academic_year == min(academic_year)) |> dplyr::pull(student_id) |> dplyr::n_distinct()
VLP_example_compact$enrolments_degrees_compact |>
dplyr::filter(enrolment_type == "single") |>
dplyr::count(academic_year, n_distinct(student_id))
VLP_example_compact$enrolments_degrees_compact |>
dplyr::filter(enrolment_type == "single") |>
dplyr::count(academic_year, dplyr:: n_distinct(student_id))
VLP_example_compact$enrolments_degrees_compact
VLP_example_compact$enrolments_degrees_compact |>
dplyr::filter(enrolment_type == "single",
BRIN == brin_own) |>
nrow()
switches <- VLP_example_compact$switches |>
dplyr::mutate(wissel = ifelse(from_BRIN == brin_own,
"uitgaand",
"inkomend"),
.before = 1)
switches <- VLP_example_compact$switches |>
dplyr::mutate(wissel = ifelse(from_BRIN == brin_own,
"uitgaand",
"inkomend"),
.before = 1)
switches
switches |> dplyr::filter(from_BRIN == brin_own) |> nrow()
n_uitswitch <- switches |> dplyr::filter(from_BRIN == brin_own) |> dplyr::count(wt = n_students)
n_uitswitch
n_uitswitch <- switches |> dplyr::filter(from_BRIN == brin_own) |> dplyr::count(wt = n_students) |> as.integer()
n_uitswitch
n_inswitch <- switches |> dplyr::filter(from_BRIN != brin_own) |> dplyr::count(wt = n_students) |> as.integer()
n_inswitch
switches |>
dplyr::arrange(dplyr::desc(n_students)) |> gt::gt()
switches |>
dplyr::arrange(wissel,
dplyr::desc(n_students)) |> gt::gt()
library(wisselstroom)
plot_sankeygradient()
plot_sankeygradient
library(ggplot2)
path_to_examplefile <- here::here("data",
"VLPBEK_2025_20240115_99XX.csv")
dVLP_example <- read_vlpbek_data(path_to_examplefile)
VLP_example <- vlpbek(dVLP_example)
VLP_example_compact <- compact_vlpbek(VLP_example)
# variabelen voor zin 1
brin_own <- VLP_example$brin_own
date_retrieval <- VLP_example$date_retrieval
# vaiabelen voor zin 2
n_enrol <- nrow(VLP_example$enrolments)
n_degree <- nrow(VLP_example$degrees)
n_students <- unique(c(unique(VLP_example$enrolments$student_id),
unique(VLP_example$degrees$student_id))
) |> length()
stopifnot(utils::packageVersion("ggplot2") >= 3.5)
packageVersion("ggplot2") >= 3.5
plot_sankeygradient_alternatief <- function (column_from, column_to, color_from, color_to, values,
padding = 2, alpha = 0.4, display_labels = TRUE, match_label_color = TRUE,
label_fontface = "bold", label_size = 10)
{
#  stopifnot(utils::packageVersion("ggplot2") >= 3.5)
d_from <- dplyr::select(dplyr::mutate(dplyr::mutate(dplyr::mutate(dplyr::mutate(dplyr::mutate(data.frame(column_from,
values), p = ifelse(column_from == dplyr::lag(column_from) |
is.na(dplyr::lag(column_from)), 0, padding)), csp = cumsum(p)),
csv = cumsum(values)), t1 = csp + csv), b1 = t1 - values),
column_from, b1, t1)
d_to <- dplyr::select(dplyr::arrange(dplyr::mutate(dplyr::mutate(dplyr::mutate(dplyr::mutate(dplyr::mutate(dplyr::arrange(dplyr::mutate(data.frame(column_to,
values), row = dplyr::row_number()), factor(column_to,
levels = unique(c(column_from, column_to)))), p = ifelse(column_to ==
dplyr::lag(column_to) | is.na(dplyr::lag(column_to)),
0, padding)), csp = cumsum(p)), csv = cumsum(values)),
t2 = csp + csv), b2 = t2 - values), row), column_to,
b2, t2)
d <- dplyr::bind_cols(d_from, d_to)
d$color_from <- color_from
d$color_to <- color_to
d <- dplyr::mutate(d, cat = as.integer(factor(paste0(column_from,
column_to), levels = paste0(column_from, column_to))))
x <- seq(0, 1, length = 101)
bez <- data.frame()
for (i in seq(nrow(d))) {
bot <- with(d[i, ], matrix(c(0, b1, 1, b1, 3, b2, 4,
b2), nrow = 4, ncol = 2, byrow = TRUE))
top <- with(d[i, ], matrix(c(0, t1, 1, t1, 3, t2, 4,
t2), nrow = 4, ncol = 2, byrow = TRUE))
bez <- dplyr::bind_rows(bez, data.frame(cat = i, x = x,
bez_b = bezier::bezier(t = x, p = bot)[, 2], bez_t = bezier::bezier(t = x,
p = top)[, 2], stringsAsFactors = FALSE))
}
bez <- dplyr::filter(bez, !is.na(bez_b))
pl <- ggplot2::ggplot(data = bez) + ggplot2::scale_x_continuous(limits = c(-0.2,
1.2))
for (i in seq(length(color_from))) {
pl <- pl + ggplot2::geom_ribbon(data = dplyr::filter(bez,
cat == i), mapping = ggplot2::aes(x = x, ymin = bez_b,
ymax = bez_t, group = cat), fill = grid::linearGradient(colours = c(d$color_from[i],
d$color_to[i]), y2 = ggplot2::unit(0, "npc")), alpha = alpha)
}
if (display_labels == TRUE) {
loc <- dplyr::filter(dplyr::ungroup(dplyr::summarise(dplyr::group_by(d,
column_from), y = 0.5 * max(t1) + 0.5 * min(b1),
color_from = color_from[t1 == max(t1)])), !is.na(y))
for (i in seq(nrow(loc))) {
pl <- pl + ggplot2::annotate("text", x = -0.01, y = loc$y[i],
label = as.character(loc$column_from[i]), fontface = label_fontface,
hjust = 1, size = label_size/ggplot2::.pt, color = ifelse(match_label_color,
loc$color_from[i], "#000000"))
}
loc <- dplyr::filter(dplyr::ungroup(dplyr::summarise(dplyr::group_by(d,
column_to), y = 0.5 * max(t2) + 0.5 * min(b2), color_to = color_to[t2 ==
max(t2)])), !is.na(y))
for (i in seq(nrow(loc))) {
pl <- pl + ggplot2::annotate("text", x = 1.01, y = loc$y[i],
label = as.character(loc$column_to[i]), fontface = label_fontface,
hjust = 0, size = label_size/ggplot2::.pt, color = ifelse(match_label_color,
loc$color_to[i], "#000000"))
}
}
pl <- pl + ggplot2::theme_void()
return(pl)
}
plot_brinflows_alternatief <- function (my_vlp_compact, color_brin_own = "#853887", color_other_he = "#246ABE",
color_brin_own_other_he = "#00B17E", color_outside_he = "grey",
label_brin_own = "this HEI", label_other_he = "other HEI",
label_outside_he = "outside HE", padding = 2, alpha = 0.4,
display_labels = TRUE, match_label_color = TRUE, label_fontface = "bold",
label_size = 10)
{
stopifnot(nrow(my_vlp_compact$summary_presences_brin) >
0)
stopifnot(class(my_vlp_compact) == "vlpbek_compact")
df_plot <- prepare_brinflows(my_vlp_compact = my_vlp_compact,
color_brin_own = color_brin_own, color_other_he = color_other_he,
color_brin_own_other_he = color_brin_own_other_he, color_outside_he = color_outside_he,
label_brin_own = label_brin_own, label_other_he = label_other_he,
label_outside_he = label_outside_he)
plot_sankeygradient_alternatief(column_from = df_plot$column_from, column_to = df_plot$column_to,
color_from = df_plot$color_from, color_to = df_plot$color_to,
values = df_plot$values, padding = padding, alpha = alpha,
display_labels = display_labels, match_label_color = match_label_color,
label_fontface = label_fontface, label_size = label_size)
}
brin_plot <- plot_brinflows_alternatief(VLP_example_compact,
label_brin_own = "deze HOI",
label_other_he = "andere HOI",
label_outside_he = "niet in HO",
alpha = 0.8)
prepare_brinflows
prepare_brinflows <- function(my_vlp_compact,
color_brin_own = "#853887",
color_other_he = "#246ABE",
color_brin_own_other_he = "#00B17E",
color_outside_he = "grey",
label_brin_own = "this HEI",
label_other_he = "other HEI",
label_outside_he = "outside HE"){
# input validity  checks
stopifnot(nrow(my_vlp_compact$summary_presences_brin) > 0)
stopifnot(class(my_vlp_compact) == "vlpbek_compact")
# combination label
label_brin_own_other_he <- paste(label_brin_own, label_other_he, sep = " & ")
# basis data
brinflows_basis <- my_vlp_compact$summary_presences_brin
# plot data
plot_data_basis <- brinflows_basis |>
# change the column names
dplyr::rename(column_from = names(brinflows_basis)[1]) |>
dplyr::rename(column_to = names(brinflows_basis)[2]) |>
dplyr::rename(values = names(brinflows_basis)[3]) |>
# making the color_from column
dplyr::mutate(color_from = dplyr::case_when(column_from == "brin_own" ~ color_brin_own,
column_from == "brin_own & other HE" ~ color_brin_own_other_he,
column_from == "other HE" ~ color_other_he,
column_from == "outside HE" ~ color_outside_he),
.after = 2) |>
# making the color_to column
dplyr::mutate(color_to = dplyr::case_when(column_to == "brin_own" ~ color_brin_own,
column_to == "brin_own & other HE" ~ color_brin_own_other_he,
column_to == "other HE" ~ color_other_he,
column_to == "outside HE" ~ color_outside_he),
.after = 3) |>
# then  change the labels of the column_from and column_to
dplyr::mutate(column_from = dplyr::case_when(column_from == "brin_own" ~ label_brin_own,
column_from == "brin_own & other HE" ~ label_brin_own_other_he,
column_from == "other HE" ~ label_other_he,
column_from == "outside HE" ~ label_outside_he)) |>
dplyr::mutate(column_to = dplyr::case_when(column_to == "brin_own" ~ label_brin_own,
column_to == "brin_own & other HE" ~ label_brin_own_other_he,
column_to == "other HE" ~ label_other_he,
column_to == "outside HE" ~ label_outside_he))
plot_data_basis
}
plot_sankeygradient_alternatief <- function (column_from, column_to, color_from, color_to, values,
padding = 2, alpha = 0.4, display_labels = TRUE, match_label_color = TRUE,
label_fontface = "bold", label_size = 10)
{
#  stopifnot(utils::packageVersion("ggplot2") >= 3.5)
d_from <- dplyr::select(dplyr::mutate(dplyr::mutate(dplyr::mutate(dplyr::mutate(dplyr::mutate(data.frame(column_from,
values), p = ifelse(column_from == dplyr::lag(column_from) |
is.na(dplyr::lag(column_from)), 0, padding)), csp = cumsum(p)),
csv = cumsum(values)), t1 = csp + csv), b1 = t1 - values),
column_from, b1, t1)
d_to <- dplyr::select(dplyr::arrange(dplyr::mutate(dplyr::mutate(dplyr::mutate(dplyr::mutate(dplyr::mutate(dplyr::arrange(dplyr::mutate(data.frame(column_to,
values), row = dplyr::row_number()), factor(column_to,
levels = unique(c(column_from, column_to)))), p = ifelse(column_to ==
dplyr::lag(column_to) | is.na(dplyr::lag(column_to)),
0, padding)), csp = cumsum(p)), csv = cumsum(values)),
t2 = csp + csv), b2 = t2 - values), row), column_to,
b2, t2)
d <- dplyr::bind_cols(d_from, d_to)
d$color_from <- color_from
d$color_to <- color_to
d <- dplyr::mutate(d, cat = as.integer(factor(paste0(column_from,
column_to), levels = paste0(column_from, column_to))))
x <- seq(0, 1, length = 101)
bez <- data.frame()
for (i in seq(nrow(d))) {
bot <- with(d[i, ], matrix(c(0, b1, 1, b1, 3, b2, 4,
b2), nrow = 4, ncol = 2, byrow = TRUE))
top <- with(d[i, ], matrix(c(0, t1, 1, t1, 3, t2, 4,
t2), nrow = 4, ncol = 2, byrow = TRUE))
bez <- dplyr::bind_rows(bez, data.frame(cat = i, x = x,
bez_b = bezier::bezier(t = x, p = bot)[, 2], bez_t = bezier::bezier(t = x,
p = top)[, 2], stringsAsFactors = FALSE))
}
bez <- dplyr::filter(bez, !is.na(bez_b))
pl <- ggplot2::ggplot(data = bez) + ggplot2::scale_x_continuous(limits = c(-0.2,
1.2))
for (i in seq(length(color_from))) {
pl <- pl + ggplot2::geom_ribbon(data = dplyr::filter(bez,
cat == i), mapping = ggplot2::aes(x = x, ymin = bez_b,
ymax = bez_t, group = cat), fill = grid::linearGradient(colours = c(d$color_from[i],
d$color_to[i]), y2 = ggplot2::unit(0, "npc")), alpha = alpha)
}
if (display_labels == TRUE) {
loc <- dplyr::filter(dplyr::ungroup(dplyr::summarise(dplyr::group_by(d,
column_from), y = 0.5 * max(t1) + 0.5 * min(b1),
color_from = color_from[t1 == max(t1)])), !is.na(y))
for (i in seq(nrow(loc))) {
pl <- pl + ggplot2::annotate("text", x = -0.01, y = loc$y[i],
label = as.character(loc$column_from[i]), fontface = label_fontface,
hjust = 1, size = label_size/ggplot2::.pt, color = ifelse(match_label_color,
loc$color_from[i], "#000000"))
}
loc <- dplyr::filter(dplyr::ungroup(dplyr::summarise(dplyr::group_by(d,
column_to), y = 0.5 * max(t2) + 0.5 * min(b2), color_to = color_to[t2 ==
max(t2)])), !is.na(y))
for (i in seq(nrow(loc))) {
pl <- pl + ggplot2::annotate("text", x = 1.01, y = loc$y[i],
label = as.character(loc$column_to[i]), fontface = label_fontface,
hjust = 0, size = label_size/ggplot2::.pt, color = ifelse(match_label_color,
loc$color_to[i], "#000000"))
}
}
pl <- pl + ggplot2::theme_void()
return(pl)
}
plot_brinflows_alternatief <- function (my_vlp_compact, color_brin_own = "#853887", color_other_he = "#246ABE",
color_brin_own_other_he = "#00B17E", color_outside_he = "grey",
label_brin_own = "this HEI", label_other_he = "other HEI",
label_outside_he = "outside HE", padding = 2, alpha = 0.4,
display_labels = TRUE, match_label_color = TRUE, label_fontface = "bold",
label_size = 10)
{
stopifnot(nrow(my_vlp_compact$summary_presences_brin) >
0)
stopifnot(class(my_vlp_compact) == "vlpbek_compact")
df_plot <- prepare_brinflows(my_vlp_compact = my_vlp_compact,
color_brin_own = color_brin_own, color_other_he = color_other_he,
color_brin_own_other_he = color_brin_own_other_he, color_outside_he = color_outside_he,
label_brin_own = label_brin_own, label_other_he = label_other_he,
label_outside_he = label_outside_he)
plot_sankeygradient_alternatief(column_from = df_plot$column_from, column_to = df_plot$column_to,
color_from = df_plot$color_from, color_to = df_plot$color_to,
values = df_plot$values, padding = padding, alpha = alpha,
display_labels = display_labels, match_label_color = match_label_color,
label_fontface = label_fontface, label_size = label_size)
}
brin_plot <- plot_brinflows_alternatief(VLP_example_compact,
label_brin_own = "deze HOI",
label_other_he = "andere HOI",
label_outside_he = "niet in HO",
alpha = 0.8)
library(fontawesome)
packageVersion("ggplot2")
packageVersion("ggplot2") >= 3.5
library(wisselstroom)
library(ggplot2)
path_to_examplefile <- here::here("data",
"VLPBEK_2025_20240115_99XX.csv")
dVLP_example <- read_vlpbek_data(path_to_examplefile)
VLP_example <- vlpbek(dVLP_example)
VLP_example_compact <- compact_vlpbek(VLP_example)
brin_own <- VLP_example$brin_own
date_retrieval <- VLP_example$date_retrieval
# vaiabelen voor zin 2
n_enrol <- nrow(VLP_example$enrolments)
n_degree <- nrow(VLP_example$degrees)
n_students <- unique(c(unique(VLP_example$enrolments$student_id),
unique(VLP_example$degrees$student_id))
) |> length()
brin_plot <- plot_brinflows(VLP_example_compact,
label_brin_own = "deze HOI",
label_other_he = "andere HOI",
label_outside_he = "niet in HO",
alpha = 0.8)
# direct plotten in een html bleek een uitdaging
# vandaar de omweg mt opslaan en als afbeelding invoegen
ggsave(file = here::here("afbeeldingen", "brin_plot.png"),
plot = brin_plot,
width = 9,
height = 4)
# packages die gebruikt woden:
# wisselstroom, here, dplyr, tidyr, ggplot2
# libraries
library(wisselstroom)
library(ggplot2)
path_to_examplefile <- here::here("data",
"VLPBEK_2025_20240115_99XX.csv")
dVLP_example <- read_vlpbek_data(path_to_examplefile)
VLP_example <- vlpbek(dVLP_example)
add_cols <- function(df, cols) {
add <- cols[!cols %in% names(df)]
if(length(add) != 0) df[add] <- NA
return(df)
}
degrees_compact <- my_vlpbek$degrees |>
dplyr::group_by(academic_year,
student_id,
BRIN, program_code, program_level, program_phase) |>
dplyr::summarise(date_graduation = min(date_graduation)) |>
dplyr::ungroup() |>
tidyr::pivot_wider(names_from = program_phase,
values_from = date_graduation,
names_prefix = "date_graduation_") |>
add_cols( c("date_graduation_A", "date_graduation_B", "date_graduation_M", "date_graduation_D"))
my_vlpbek <- VLP_example
degrees_compact <- my_vlpbek$degrees |>
dplyr::group_by(academic_year,
student_id,
BRIN, program_code, program_level, program_phase) |>
dplyr::summarise(date_graduation = min(date_graduation)) |>
dplyr::ungroup() |>
tidyr::pivot_wider(names_from = program_phase,
values_from = date_graduation,
names_prefix = "date_graduation_") |>
add_cols( c("date_graduation_A", "date_graduation_B", "date_graduation_M", "date_graduation_D"))
View(dVLP_example)
path_to_examplefile <- here::here("data",
"VLPBEK_2025_20240115_99XX.csv")
dVLP_example <- read_vlpbek_data(path_to_examplefile)
View(dVLP_example)
View(dVLP_example)
# run deze regel
devtools::install_github("ed2c/wisselstroom")
# run deze regel
devtools::install_github("ed2c/wisselstroom")
# libraries
library(wisselstroom)
library(ggplot2)
path_to_examplefile <- here::here("data",
"VLPBEK_2025_20240115_99XX.csv")
dVLP_example <- read_vlpbek_data(path_to_examplefile)
VLP_example <- vlpbek(dVLP_example)
VLP_example_compact <- compact_vlpbek(VLP_example)
# packages die gebruikt woden:
# wisselstroom, here, dplyr, tidyr, ggplot2
# libraries
library(wisselstroom)
library(ggplot2)
path_to_examplefile <- here::here("data",
"VLPBEK_2025_20240115_99XX.csv")
mijn_bek_data <- read_bek_data(path_to_examplefile)
path_to_examplefile <- here::here("data",
"VLPBEK_2025_20240115_99XX.csv")
mijn_bek_data <- read_bek_data(path_to_examplefile)
mijn_basics <- make_flow_basics(mijn_data)
mijn_data <- read_bek_data(path_to_examplefile)
mijn_basics <- make_flow_basics(mijn_data)
mijn_insights <- make_flow_insights(mijn_basics)
mijn_insights$summary_presences_brin |>
gt::gt()
mijn_insights <- make_flow_insights(mijn_basics)
mijn_insights$summary_presences_brin |>
gt::gt()
mijn_insights$summary_situations_brin |>
gt::gt()
brin_plot <- plot_brinflows(mijn_insights,
label_brin_own = "deze HOI",
label_other_he = "andere HOI",
label_outside_he = "niet in HO",
alpha = 0.8)
# direct plotten in een html bleek een uitdaging
# vandaar de omweg mt opslaan en als afbeelding invoegen
ggsave(file = here::here("afbeeldingen", "brin_plot.png"),
plot = brin_plot,
width = 9,
height = 4)
mijn_insights$switches
min_acyear <- min(mijn_basics$enrolments$academic_year)
max_acyear <- max(mijn_basics$enrolments$academic_year)
mijn_insights$switches
mijn_insights$switches |> gt::gt()
mijn_insights$switches |>
dplyr::filter(from_brin == mijninsights$brin_own) |>
gt::gt()
mijn_insights$switches |>
dplyr::filter(from_brin == mijn_insights$brin_own) |>
gt::gt()
after_degree_31001 <- after_degree(program_of_interest = "31001",
my_vlpbek_compact = VLP_example_compact)
after_degree_31001 <- after_degree(program_of_interest = "31001",
my_flow_insight = mijn_insights)
vervolg <- after_degree_31001$from_to_single
vervolg |> gt::gt()
after_degree_31001 <- after_degree(program_of_interest = "31009",
my_flow_insight = mijn_insights)
vervolg <- after_degree_31001$from_to_single
vervolg |> gt::gt()
after_degree_31001 <- after_degree(program_of_interest = "31009",
my_flow_insight = mijn_insights,
prop_exam = FALSE)
vervolg <- after_degree_31001$from_to_single
vervolg |> gt::gt()
mijn_basics <- make_flow_basics(mijn_data)
mijn_insights <- make_flow_insights(mijn_basics)
summary(mijn_insights)
str(mijn_insights)
mijn_data <- read_bek_data(path_to_examplefile)
